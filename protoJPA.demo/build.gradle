apply plugin: 'java'

repositories {
    mavenCentral()
}

configurations {
    db
}

sourceSets {
    main {
        java {
            srcDir 'src/main/generatedClasses'
        }
        resources {
            srcDir 'src/main/generatedResources'
        }
    }
}

dependencies {
    compile(
            'com.google.protobuf:protobuf-java:2.5.0',
            'junit:junit:4.11',
            project(":protoJPA.core"),
            project(":protoJPA.testDB")
    )
    db(
           project(":protoJPA.testDB")
    )
}

task generateEntities() {

    doLast {
       ant.taskdef(name: 'hibernatetool',
                classname: 'org.hibernate.tool.ant.HibernateToolTask',
                classpath: configurations.runtime.asPath
        )
        ant.hibernatetool(
                destdir: "$projectDir/src/main/generatedClasses"
        ) {
            jdbcconfiguration(
                    packagename: 'db.entities',
                    configurationfile: "$projectDir/src/main/resources/hibernate.cfg.xml",
                    revengfile: "$projectDir/src/main/resources/hibernate.reveng.xml",
            )

            hbmtemplate(exporterclass: "com.lognet.protojpa.Pojo2ProtobufExporter") {
                property(key: "jdk5", value: "true")
                property(key: "ejb3", value: "true")
                property(key: "protoFileName", value: "demo")
                property(key: "resourcesDestDir", value: "$projectDir/src/main/generatedResources")
                property(key: "protoToolFilePath", value: "C:\\protoc-2.5.0-win32\\protoc.exe")
            }

            //hbm2java (jdk5:"true",ejb3:"true")
            // hbm2dao()

        }

    }
}





task startDB {
    doFirst {

        ant.java(fork: true, spawn: true, classname: "org.hsqldb.Server") {
            arg(value: '--database.0')
            arg(value: 'file:testdb/db')
            arg(value: '--dbname.0')
            arg(value: 'xdb')
            classpath {
                configurations.db.each { File f ->
                    pathelement(location: f.getAbsolutePath())
                }
            }
        }

        // have to fork it since TestDB is looking the resource using SystemClassLoader
        ant.java(fork: true, spawn: false, classname: "com.lognet.protojpa.testdb.TestDB") {
            arg(value: '-populate')
            classpath {
                configurations.db.each { File f ->
                    pathelement(location: f.getAbsolutePath())
                }
            }
        }
    }
}

task stopDB() {
    doFirst {
        ant.java(fork: true, spawn: false, classname: "com.lognet.protojpa.testdb.TestDB") {
            arg(value: '-stop')
            classpath {
                configurations.db.each { File f ->
                    pathelement(location: f.getAbsolutePath())
                }
            }
        }
    }
}

generateEntities.dependsOn startDB
stopDB.dependsOn generateEntities
compileJava.dependsOn stopDB







